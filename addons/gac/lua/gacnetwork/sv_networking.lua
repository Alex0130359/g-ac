local _string_char = string.char
local _util_CRC = util.CRC
local _net_WriteData = net.WriteData
local _net_ReadUInt = net.ReadUInt
local _player_GetHumans = player.GetHumans
local _util_Compress = util.Compress
local _math_Round = math.Round
local _string_match = string.match
local _string_gsub = string.gsub
local _string_sub = string.sub
local _math_ceil = math.ceil
local _tonumber = tonumber
local _util_Decompress = util.Decompress
local _net_Send = (SERVER and net.Send or nil)
local _math_random = math.random
local _net_ReadBool = net.ReadBool
local _util_TableToJSON = util.TableToJSON
local _table_remove = table.remove
local _net_WriteBool = net.WriteBool
local _string_Explode = string.Explode
local _string_byte = string.byte
local _string_format = string.format
local _util_JSONToTable = util.JSONToTable
local _string_rep = string.rep
local _net_Start = net.Start
local _hook_Add = hook.Add
local _net_BytesWritten = net.BytesWritten
local _IsValid = IsValid
local _net_Receive = net.Receive
local _timer_Simple = timer.Simple
local _hook_Run = hook.Run
local _net_ReadData = net.ReadData
local _net_WriteUInt = net.WriteUInt
local _util_AddNetworkString = (SERVER and util.AddNetworkString or nil)
local _math_randomseed = math.randomseed
local _SysTime = SysTime

--[[
	GM-LUAI Networking

local args = {...}
local _1, _2, _3, _4, _5, _6, _7, _8, _10, _11, _32 = 1,2,3,4,5,6,7,8,10,11,32
local CompileCode = args[_2]
local RunCode = args[_3]
args = args[_1]
_G[args[_5] ] = {}
local function gAC_Send(channelName, data)
	data = util.Compress(data)
	net.Start(args[_3])
		net.WriteUInt (tonumber(util.CRC (channelName .. args[_4])), _32)
		net.WriteData (data, #data)
        net.WriteBool (false)
	net.SendToServer()
end
local function gAC_GetHandler(channelName)
	return _G[args[_5] ][tonumber(util.CRC(channelName .. args[_4]))]
end
local StreamID, ASTToServer = 0, {}
local function gAC_Stream(channelName, data, split)
	local channelId = tonumber(util.CRC(channelName .. args[_4]))
	local data_compress = util.Compress(data)
	local data_size = #data_compress
	split = (split == nil and 10000 or split)
	local parts = math.ceil( data_size / split )
	if parts == 1 then
		gAC_Send(channelName, data)
		return
	end
    StreamID = StreamID + 1
    local ID = '#' .. StreamID
	local AstToServer = {
        ['Channel'] = channelId,
		['Parts'] = {}
	}
	for i=1, parts do
		local min
		local max
		if i == 1 then
			min = i
			max = split
		elseif i > 1 and i ~= parts then
			min = ( i - 1 ) * split + 1
			max = min + split - 1
		elseif i > 1 and i == parts then
			min = ( i - 1 ) * split + 1
			max = data_size
		end
		local data = string.sub( data_compress, min, max )
		if i < parts && i > 1 then
			AstToServer['Parts'][#AstToServer['Parts'] + 1] = {
				['ID'] = ID,
				['Type'] = 3,
				['Data'] = data
			}
		else
			if i == 1 then
				AstToServer['Parts'][#AstToServer['Parts'] + 1] = {
					['ID'] = ID,
					['Type'] = 1,
					['Data'] = data
				}
			end
			if i == parts then
				AstToServer['Parts'][#AstToServer['Parts'] + 1] = {
					['ID'] = ID,
					['Type'] = 2,
					['Data'] = data
				}
			end
		end
	end
	local streamdata = util.TableToJSON(AstToServer['Parts'][1])
	table.remove(AstToServer['Parts'], 1)
	net.Start(args[_3])
		net.WriteUInt (channelId, 32)
		net.WriteData (streamdata, #streamdata)
		net.WriteBool(true)
	net.SendToServer()
	ASTToServer[ID] = AstToServer
end
local function gAC_AddReceiver (channelName, handler)
	_G[args[_5] ][tonumber(util.CRC (channelName .. args[_4]))] = handler
end
local AST = {}
local function HandleMessage (bit)
	local channelId = net.ReadUInt (_32)
	local handler   = _G[args[_5] ][channelId]
	if not handler then return end
	local data = net.ReadData (bit / _8 - _4)
    local isstream = net.ReadBool()
    if isstream then
        data = util.JSONToTable(data)
        if data['Type'] == 1 then
            AST[data['ID'] ] = data['Data']
            gAC_Send('gAC.StreamResponse', data['ID'])
        elseif data['Type'] == 2 then
            local _data = AST[data['ID'] ] .. data['Data']
            handler (util.Decompress(_data))
            AST[data['ID'] ] = nil
        elseif data['Type'] == 3 then
            AST[data['ID'] ] = AST[data['ID'] ] .. data['Data']
            gAC_Send('gAC.StreamResponse', data['ID'])
        end
    else
        handler (util.Decompress(data))
    end
end
gAC_AddReceiver("LoadString", function(data) 
    RunCode(data, args[_7] .. "gAC.LoadString-" .. #data) 
end)
gAC_AddReceiver("LoadPayload", function(data)
	local includer = "local gAC_Net = {...} local gAC_Send = gAC_Net[1] local gAC_Stream = gAC_Net[2] local gAC_AddReceiver = gAC_Net[3] local gAC_GetHandler = gAC_Net[4]\n"
    local func = CompileCode(includer .. data, args[_7] .. args[_10] .. #data)
    func(gAC_Send, gAC_Stream, gAC_AddReceiver, gAC_GetHandler)
end)
gAC_AddReceiver("gAC.StreamResponse", function(data)
	local AstToServer = ASTToServer[data]
	if AstToServer then
        local streamdata = _util_TableToJSON(AstToServer['Parts'][1])
        table.remove(AstToServer['Parts'], 1)
        net.Start(args[_3])
            net.WriteUInt (AstToServer['Channel'], 32)
            net.WriteData (streamdata, #streamdata)
            net.WriteBool(true)
        net.SendToServer()
        if #AstToServer['Parts'] < 1 then
            ASTToServer[data] = nil
        end
	end
end)
net.Receive (args[_3],function(bit) HandleMessage(bit) end)
gAC_Send('g-AC_PayloadVerification', '')
return gAC_Send, gAC_Stream, gAC_AddReceiver, gAC_GetHandler

--Client cl_receivers.lua
local _CompileString = CompileString
local _net_Receive = net.Receive
local _util_Decompress = util.Decompress
local _RunString = RunString
local _hook_Add = hook.Add
local _net_Start = net.Start
local _net_SendToServer = (CLIENT and net.SendToServer or nil)
local _string_Explode = string.Explode
local _net_ReadData = net.ReadData
local _util_JSONToTable = util.JSONToTable
_net_Receive("gAC.PlayerInit", function(len)
    local codec = _string_Explode("[EXLD]", _net_ReadData(len))
    for i=1, #codec do
        if i == #codec then
            codec[i] = codec[i]:sub(1, codec[i]:len()-2)
        end
        codec[i] = _util_Decompress(codec[i])
    end
    local func = _CompileString( codec[1], codec[2] )
    func(codec, _CompileString, _RunString)
end)
_hook_Add('InitPostEntity', 'gAC.Payloads', function()
    _net_Start('gAC.PlayerInit')
    _net_SendToServer()
end)
]]

if gAC.Network and gAC.Network.ReceiveCount then return end --prevent lua refresh

gAC = gAC or {}
--[[
    NiceCream's encoder library, making script hidden from reality.
    My goals atleast: intense encoder, low performance decoder
]]

gAC.Encoder = {}

gAC.Encoder.Unicode_String = "‪"

--[[
	String Randomizer
	Generate randomize string including a Unicode character
]]
function gAC.Encoder.stringrandom(length)
	local str = ""
	for i = 1, length do
		local typo =  _math_Round(_math_random(1, 4))
		if typo == 1 then
			str = str.. _string_char(_math_random(97, 122))
		elseif typo == 2 then
			str = str.. _string_char(_math_random(65, 90))
		elseif typo == 3 then
			str = str.. _string_char(_math_random(49, 57))
		end
	end
	return str
end

--[[
	Key String to Key Float
	Converts a table key into a table of values for encoders/decoders
]]

function gAC.Encoder.KeyToFloat(s)
	local z = {}
	for i = 1, #s do
		local key = _string_Explode("", s[i])
		z[i] = 0
		for v = 1, #key do 
			z[i] = z[i] + _string_byte(key[v])
		end 
	end
    return z
end

--[[
	String to Hex
]]

function gAC.Encoder.ToHex(str)
	local byte = ''
    for i = 1, #str do
        byte = byte .. '\\x' .. _string_format('%02X', _string_byte(str:sub(i, i)))
    end
	return byte
end

--[[
    Table to String
]]

function gAC.Encoder.Tabletostring(tbl)
    local str = "{"
    local len = #tbl
    for i = 1, len do
        str = str .. tbl[i] .. (i ~= len and ',' or '')
    end
    str = str .. '}'
    return str
end

--[[
	Encoder
	General purpose of encoding string into unreadable format.
	Just cause someone tried to look into my creations.
]]

local function floor(number)
    return number - (number % 1)
end

local function bxor (a,b,c)
    local r = 0
    for i = 0, 31 do
        local x = (a * .5) + (b * .5) + (c * .5)
        if x ~= floor (x) then
        r = r + 2^i
        end
        a = floor (a * .5)
        b = floor (b * .5)
        c = floor (c * .5)
    end
    return r
end

function gAC.Encoder.Encode(str, key)
    local encode, key_dir, key = {}, 0, gAC.Encoder.KeyToFloat(key)
    for i = 1, #str do
		key_dir = key_dir + 1
        encode[i] = bxor(_string_byte(str:sub(i, i)), key[key_dir] % 255, (#str * #key) % 255)
		if key_dir == #key then
			key_dir = 0
		end
    end
    return gAC.Encoder.Tabletostring(encode)
end

--[[
	Decoder function
	Used on the client-side realm, simply decodes string into readable format for lua to use.

function(data)
    local key = __EXTK
    local decode, key_dir, data_len, key_len = '', 0, #data, #key
    for i = 1, data_len do
		key_dir = key_dir + 1
        decode = decode .. __CHAR( __XOR(data[i], key[key_dir] % 255, (data_len * key_len) % 255) )
		if key_dir == key_len then
			key_dir = 0
		end
    end
    return decode
end
]]
gAC.Encoder.Decoder_Func = [[function(⁮﻿﻿)local
⁪‪function=__EXTK
local
⁪,⁮⁪and,⁭for,local⁮='',0,#⁮﻿﻿,#⁪‪function
for
repeat⁮=1,⁭for
do
⁮⁪and=⁮⁪and+1
⁪=⁪..__CHAR(__XOR(⁮﻿﻿[repeat⁮],⁪‪function[⁮⁪and]%255,(⁭for*local⁮)%255))if
⁮⁪and==local⁮
then
⁮⁪and=0
end
end
return
⁪
end]]

gAC.Network = gAC.Network or {}
gAC.Network.ReceiveCount = 0
gAC.Network.SendCount    = 0
gAC.Network.AST = {}
gAC.Network.ASTToClient = {}

gAC.Network.GlobalChannel = gAC.Encoder.stringrandom(_math_Round(_math_random(6, 12))) .. "gAC" .. gAC.Encoder.stringrandom(_math_Round(_math_random(6, 12)))
gAC.Network.Channel_Rand = gAC.Encoder.stringrandom(_math_Round(_math_random(4, 22))) .. "gAC"
gAC.Network.Channel_Glob = gAC.Encoder.stringrandom(_math_Round(_math_random(6, 12))) .. "gAC" .. gAC.Encoder.stringrandom(_math_Round(_math_random(6, 12)))
gAC.Network.Verify_Hook = gAC.Encoder.stringrandom(_math_Round(_math_random(6, 12))) .. "gAC" .. gAC.Encoder.stringrandom(_math_Round(_math_random(6, 12)))

--Global Decoder, NiceCream got pissed
gAC.Network.Global_Decoder = {}
for i=1, _math_Round(_math_random(6,8)) do
	gAC.Network.Global_Decoder[i] = gAC.Encoder.stringrandom(_math_Round(_math_random(4, 8)))
end
local Rand_StrFunc = _math_Round(_math_random(1, 2))
gAC.Network.Decoder_Var = {"string.lower", "string.upper", "string.Left", "string.Right", "string.rep", "string.reverse", "string.len", "string.byte", 
"gcinfo", "jit.status", "util.NetworkIDToString", "GetGlobalInt", "GetGlobalFloat", "GetGlobalString"}
gAC.Network.Decoder_Var = gAC.Network.Decoder_Var[_math_Round(_math_random(1, #gAC.Network.Decoder_Var))]
gAC.Network.Decoder_VarName = gAC.Network.Decoder_Var
gAC.Network.Decoder_Verify = "GAC_" .. gAC.Encoder.stringrandom(_math_Round(_math_random(9, 14))) .. "_"
gAC.Network.Decoder_Get = _string_rep(gAC.Encoder.Unicode_String,_math_Round(_math_random(5, 12)))
gAC.Network.Decoder_Undo = _string_rep(gAC.Encoder.Unicode_String,_math_Round(_math_random(15, 19)))

local function PerformG(str)
    local tbl = _string_Explode(".", str)
    local unloadervar = "['"
    for k=1, #tbl do
    	local v = tbl[k]
        if tbl[k + 1] then
            unloadervar = unloadervar .. gAC.Encoder.ToHex(v) .. "']['"
        else
            unloadervar = unloadervar .. gAC.Encoder.ToHex(v) .. "']"
        end
    end
    return unloadervar
end
gAC.Network.Decoder_Var = PerformG(gAC.Network.Decoder_Var)

local Payload_001 = [[--]] .. gAC.Encoder.stringrandom(_math_Round(_math_random(15, 20))) .. [[

local
__CHAR,__FLOOR,__XOR
__CHAR=function(⁮⁪⁪⁪)local
‪‪⁮={[1]="\1",[2]="\2",[3]="\3",[4]="\4",[5]="\5",[6]="\6",[7]="\7",[8]="\b",[9]="\t",[10]="\n",[11]="\v",[12]="\f",[13]="\r",[14]="\14",[15]="\15",[16]="\16",[17]="\17",[18]="\18",[19]="\19",[20]="\20",[21]="\21",[22]="\22",[23]="\23",[24]="\24",[25]="\25",[26]="\26",[27]="\27",[28]="\28",[29]="\29",[30]="\30",[31]="\31",[32]="\32",[33]="\33",[34]="\"",[35]="\35",[36]="\36",[37]="\37",[38]="\38",[39]="\'",[40]="\40",[41]="\41",[42]="\42",[43]="\43",[44]="\44",[45]="\45",[46]="\46",[47]="\47",[48]="\48",[49]="\49",[50]="\50",[51]="\51",[52]="\52",[53]="\53",[54]="\54",[55]="\55",[56]="\56",[57]="\57",[58]="\58",[59]="\59",[60]="\60",[61]="\61",[62]="\62",[63]="\63",[64]="\64",[65]="\65",[66]="\66",[67]="\67",[68]="\68",[69]="\69",[70]="\70",[71]="\71",[72]="\72",[73]="\73",[74]="\74",[75]="\75",[76]="\76",[77]="\77",[78]="\78",[79]="\79",[80]="\80",[81]="\81",[82]="\82",[83]="\83",[84]="\84",[85]="\85",[86]="\86",[87]="\87",[88]="\88",[89]="\89",[90]="\90",[91]="\91",[92]="\92",[93]="\93",[94]="\94",[95]="\95",[96]="\96",[97]="\97",[98]="\98",[99]="\99",[100]="\100",[101]="\101",[102]="\102",[103]="\103",[104]="\104",[105]="\105",[106]="\106",[107]="\107",[108]="\108",[109]="\109",[110]="\110",[111]="\111",[112]="\112",[113]="\113",[114]="\114",[115]="\115",[116]="\116",[117]="\117",[118]="\118",[119]="\119",[120]="\120",[121]="\121",[122]="\122",[123]="\123",[124]="\124",[125]="\125",[126]="\126",[127]="\127",[128]="\128",[129]="\129",[130]="\130",[131]="\131",[132]="\132",[133]="\133",[134]="\134",[135]="\135",[136]="\136",[137]="\137",[138]="\138",[139]="\139",[140]="\140",[141]="\141",[142]="\142",[143]="\143",[144]="\144",[145]="\145",[146]="\146",[147]="\147",[148]="\148",[149]="\149",[150]="\150",[151]="\151",[152]="\152",[153]="\153",[154]="\154",[155]="\155",[156]="\156",[157]="\157",[158]="\158",[159]="\159",[160]="\160",[161]="\161",[162]="\162",[163]="\163",[164]="\164",[165]="\165",[166]="\166",[167]="\167",[168]="\168",[169]="\169",[170]="\170",[171]="\171",[172]="\172",[173]="\173",[174]="\174",[175]="\175",[176]="\176",[177]="\177",[178]="\178",[179]="\179",[180]="\180",[181]="\181",[182]="\182",[183]="\183",[184]="\184",[185]="\185",[186]="\186",[187]="\187",[188]="\188",[189]="\189",[190]="\190",[191]="\191",[192]="\192",[193]="\193",[194]="\194",[195]="\195",[196]="\196",[197]="\197",[198]="\198",[199]="\199",[200]="\200",[201]="\201",[202]="\202",[203]="\203",[204]="\204",[205]="\205",[206]="\206",[207]="\207",[208]="\208",[209]="\209",[210]="\210",[211]="\211",[212]="\212",[213]="\213",[214]="\214",[215]="\215",[216]="\216",[217]="\217",[218]="\218",[219]="\219",[220]="\220",[221]="\221",[222]="\222",[223]="\223",[224]="\224",[225]="\225",[226]="\226",[227]="\227",[228]="\228",[229]="\229",[230]="\230",[231]="\231",[232]="\232",[233]="\233",[234]="\234",[235]="\235",[236]="\236",[237]="\237",[238]="\238",[239]="\239",[240]="\240",[241]="\241",[242]="\242",[243]="\243",[244]="\244",[245]="\245",[246]="\246",[247]="\247",[248]="\248",[249]="\249",[250]="\250",[251]="\251",[252]="\252",[253]="\253",[254]="\254",[255]="\255"}local
⁪﻿‪=‪‪⁮[⁮⁪⁪⁪]if
not
⁪﻿‪
then
⁪﻿‪=_G['\x73\x74\x72\x69\x6E\x67']['\x63\x68\x61\x72'](⁮⁪⁪⁪)end
return
⁪﻿‪
end
__FLOOR=function(⁭⁮﻿)return
⁭⁮﻿-(⁭⁮﻿%1)end
__XOR=function(...)local
‪,﻿=0,{...}for
⁮⁭﻿=0,31
do
local
⁪⁪‪﻿=0
for
⁪⁭=1,#﻿
do
⁪⁪‪﻿=⁪⁪‪﻿+(﻿[⁪⁭]*.5)end
if
⁪⁪‪﻿~=__FLOOR(⁪⁪‪﻿)then
‪=‪+2^⁮⁭﻿
end
for
⁭⁭‪⁪=1,#﻿
do
﻿[⁭⁭‪⁪]=__FLOOR(﻿[⁭⁭‪⁪]*.5)end
end
return
‪
end
local
‪﻿=(CLIENT
and
net.SendToServer
or
nil)local
﻿﻿⁭=net.WriteData
local
‪⁮﻿⁪=util.TableToJSON
local
⁮⁭⁪=net.Receive
local
‪=util.Decompress
local
⁭﻿⁭=string.sub
local
﻿﻿⁭‪=tonumber
local
⁮⁭=net.Start
local
﻿‪‪=math.ceil
local
﻿⁪‪=net.WriteUInt
local
⁪=net.ReadUInt
local
﻿⁭﻿=util.JSONToTable
local
⁮=util.CRC
local
﻿⁪⁪⁭⁭=util.Compress
local
⁭⁭=net.WriteBool
local
﻿⁮⁮=net.ReadData
local
﻿⁮⁭=net.ReadBool
local
‪⁪﻿⁪⁮=table.remove
local
﻿⁪={...}local
⁪﻿⁮⁮‪,⁮⁭‪‪﻿,﻿⁮⁪⁪⁮,﻿﻿‪⁪,﻿‪‪⁪⁮,⁮‪⁭,⁮‪,﻿,‪⁪⁮⁮,⁮‪﻿,⁪⁮﻿⁪﻿=1,2,3,(-1+1+2+2),(-1+3+3),(9-10+7),7,(0+2+4+3-1),(1+1+6+3-1),(8+3),(82-50)local
‪⁭⁮=﻿⁪[⁮⁭‪‪﻿]local
⁭﻿⁪⁭⁪=﻿⁪[﻿⁮⁪⁪⁮]﻿⁪=﻿⁪[⁪﻿⁮⁮‪]_G[﻿⁪[﻿‪‪⁪⁮] ]={}local
function
⁮‪⁪⁭(⁪﻿⁮‪,⁭⁪﻿⁭﻿)⁭⁪﻿⁭﻿=﻿⁪⁪⁭⁭(⁭⁪﻿⁭﻿)⁮⁭(﻿⁪[﻿⁮⁪⁪⁮])﻿⁪‪(﻿﻿⁭‪(⁮(⁪﻿⁮‪..﻿⁪[﻿﻿‪⁪])),⁪⁮﻿⁪﻿)﻿﻿⁭(⁭⁪﻿⁭﻿,#⁭⁪﻿⁭﻿)⁭⁭(!1)‪﻿()end
local
function
⁭⁭﻿⁪‪(⁪‪)return
_G[﻿⁪[﻿‪‪⁪⁮] ][﻿﻿⁭‪(⁮(⁪‪..﻿⁪[﻿﻿‪⁪]))]end
local
‪⁪﻿‪⁮,‪⁮‪=0,{}local
function
‪⁪(﻿⁭,⁮⁮⁭⁪,⁮⁮⁪⁭⁪)local
⁪﻿﻿﻿=﻿﻿⁭‪(⁮(﻿⁭..﻿⁪[﻿﻿‪⁪]))local
⁭⁮﻿⁭=﻿⁪⁪⁭⁭(⁮⁮⁭⁪)local
⁭⁮‪=#⁭⁮﻿⁭
⁮⁮⁪⁭⁪=(⁮⁮⁪⁭⁪==nil
and(1812+4230+3958)or
⁮⁮⁪⁭⁪)local
﻿‪﻿⁪=﻿‪‪(⁭⁮‪/⁮⁮⁪⁭⁪)if
﻿‪﻿⁪==1
then
⁮‪⁪⁭(﻿⁭,⁮⁮⁭⁪)return
end
‪⁪﻿‪⁮=‪⁪﻿‪⁮+1
local
⁭=(function(⁭⁪⁭,‪)local
⁮,﻿,⁮﻿‪⁮,⁮⁭⁪='',0,#‪,#⁭⁪⁭
for
⁭⁭=1,⁮﻿‪⁮
do
﻿=﻿+1
⁮=⁮..__CHAR(__XOR(‪[⁭⁭],⁭⁪⁭[﻿]%(-155+398+212+86-287+1),(⁮﻿‪⁮*⁮⁭⁪)%(160+193-98)))if
﻿==⁮⁭⁪
then
﻿=0
end
end
return
⁮
end)({(72+226),(-305+721+371-1012+584),(191+339)},{(-1+2+1-2+8+16-15+3-1)})..‪⁪﻿‪⁮
local
⁭⁮﻿={[(function(⁭,‪﻿⁭)local
⁭⁪﻿,﻿,﻿⁮,‪='',0,#‪﻿⁭,#⁭
for
⁪⁭⁪⁮=1,﻿⁮
do
﻿=﻿+1
⁭⁪﻿=⁭⁪﻿..__CHAR(__XOR(‪﻿⁭[⁪⁭⁪⁮],⁭[﻿]%(84+84-60+77+70),(﻿⁮*‪)%(64+191)))if
﻿==‪
then
﻿=0
end
end
return
⁭⁪﻿
end)({(204+115+130-97-95+166-152+1),(2848+426+2632-1515-2510-1658+1),(-2+55+31+49-25)},{(41-25+32+26+15-19+0+1),(13+92+77-47+26+15-19),(5+6-3+5+6+5),(-57+61-33+25+50+36+23+1),(-1460-1222+2121-1733-275+2724),(17+11),(50+107-102+77-27-1)})]=⁪﻿﻿﻿,[(function(⁪⁪,⁭)local
﻿‪⁭⁮,﻿⁭﻿⁪,﻿﻿⁭⁮,⁭‪⁭='',0,#⁭,#⁪⁪
for
⁪⁮‪﻿=1,﻿﻿⁭⁮
do
﻿⁭﻿⁪=﻿⁭﻿⁪+1
﻿‪⁭⁮=﻿‪⁭⁮..__CHAR(__XOR(⁭[⁪⁮‪﻿],⁪⁪[﻿⁭﻿⁪]%(1707+1922-1569-1805),(﻿﻿⁭⁮*⁭‪⁭)%(1022+4792+41+2374-4675-5193+1894)))if
﻿⁭﻿⁪==⁭‪⁭
then
﻿⁭﻿⁪=0
end
end
return
﻿‪⁭⁮
end)({(516-566-30-110+488+1),(41+58),(112-34),(66+89+29+112),(125+164)},{(-682+783),(-14+41),(11+9+17),(-493+130-180+551-408+587-87-30-2),(-29+34+67)})]={}}for
‪⁭⁪=1,﻿‪﻿⁪
do
local
⁮⁪⁪
local
﻿⁮
if
‪⁭⁪==1
then
⁮⁪⁪=‪⁭⁪
﻿⁮=⁮⁮⁪⁭⁪
elseif
‪⁭⁪>1
and
‪⁭⁪~=﻿‪﻿⁪
then
⁮⁪⁪=(‪⁭⁪-1)*⁮⁮⁪⁭⁪+1
﻿⁮=⁮⁪⁪+⁮⁮⁪⁭⁪-1
elseif
‪⁭⁪>1
and
‪⁭⁪==﻿‪﻿⁪
then
⁮⁪⁪=(‪⁭⁪-1)*⁮⁮⁪⁭⁪+1
﻿⁮=⁭⁮‪
end
local
⁪﻿=⁭﻿⁭(⁭⁮﻿⁭,⁮⁪⁪,﻿⁮)if
‪⁭⁪<﻿‪﻿⁪&&‪⁭⁪>1
then
⁭⁮﻿[(function(⁭⁭⁮⁪,⁪)local
‪,⁭,﻿⁭,⁪‪‪⁪='',0,#⁪,#⁭⁭⁮⁪
for
‪⁭⁭=1,﻿⁭
do
⁭=⁭+1
‪=‪..__CHAR(__XOR(⁪[‪⁭⁭],⁭⁭⁮⁪[⁭]%(-340-63+304+354),(﻿⁭*⁪‪‪⁪)%(64+36+61+82+5+6+1)))if
⁭==⁪‪‪⁪
then
⁭=0
end
end
return
‪
end)({(421+120),(-82+168),(60+32-40+1),(-289+877),(18+344-48+26-99-50+125+1)},{(-266+25-177-20-6+386-187+330+1),(20+115+53-94-48),(-48+39+47+11+34+38-28+1),(-15+24+20-18+10+13+1),(-31+54+61)})][#⁭⁮﻿[(function(﻿﻿,⁪)local
﻿⁭,﻿⁪⁭,⁭⁮,‪⁭⁭='',0,#⁪,#﻿﻿
for
⁪⁭‪=1,⁭⁮
do
﻿⁪⁭=﻿⁪⁭+1
﻿⁭=﻿⁭..__CHAR(__XOR(⁪[⁪⁭‪],﻿﻿[﻿⁪⁭]%(-54+137-41+145+68),(⁭⁮*‪⁭⁭)%(82+120-68+107-83+97)))if
﻿⁪⁭==‪⁭⁭
then
﻿⁪⁭=0
end
end
return
﻿⁭
end)({(107-122+182-15+103+1),(18+63+53+20),(-54+79+118+63+80-1),(1179-916),(316-258+540-349+18-234+482)},{(124+286+112-647+289+29-120-1),(84-69+57+24+58+73-1),(193+97-173),(32+49+17-15-13+45-64+50),(-2-5+66+14+38)})]+1]={[(function(⁪﻿⁭,⁪)local
⁭⁪⁪,﻿⁪‪⁮,⁪﻿⁮,⁮⁭⁭⁪='',0,#⁪,#⁪﻿⁭
for
⁮⁮=1,⁪﻿⁮
do
﻿⁪‪⁮=﻿⁪‪⁮+1
⁭⁪⁪=⁭⁪⁪..__CHAR(__XOR(⁪[⁮⁮],⁪﻿⁭[﻿⁪‪⁮]%(69+340-21-133),(⁪﻿⁮*⁮⁭⁭⁪)%(183-327+453-54)))if
﻿⁪‪⁮==⁮⁭⁭⁪
then
﻿⁪‪⁮=0
end
end
return
⁭⁪⁪
end)({(47+1+127),(-71465+71543),(-110+542-104-520+405)},{(1+139-10-72+139-158+122+61+2),(-308+320)})]=⁭,[(function(⁭⁪⁭‪,﻿⁮⁮)local
‪⁭⁭,⁪⁪,‪,⁮﻿='',0,#﻿⁮⁮,#⁭⁪⁭‪
for
⁭=1,‪
do
⁪⁪=⁪⁪+1
‪⁭⁭=‪⁭⁭..__CHAR(__XOR(﻿⁮⁮[⁭],⁭⁪⁭‪[⁪⁪]%(-491+329+166+49-156-72+199+231),(‪*⁮﻿)%(-4+49+50-49+68+62-3+84-2)))if
⁪⁪==⁮﻿
then
⁪⁪=0
end
end
return
‪⁭⁭
end)({(164-310+412),(43+26+49-36+48-2+61+32+1),(111+85-74+48+127-77+46+122-1),(103+28+50+106+102-64-30-16)},{(-30+39+29+41),(88+100-88+64+20-1),(-607+835),(200+165-215+6-47)})]=3,[(function(‪,⁮‪⁪)local
﻿‪﻿,⁪,⁭⁪﻿,﻿‪‪='',0,#⁮‪⁪,#‪
for
⁭⁪‪﻿=1,⁭⁪﻿
do
⁪=⁪+1
﻿‪﻿=﻿‪﻿..__CHAR(__XOR(⁮‪⁪[⁭⁪‪﻿],‪[⁪]%(92-63+107+64+56-1),(⁭⁪﻿*﻿‪‪)%(-12+262+5)))if
⁪==﻿‪‪
then
⁪=0
end
end
return
﻿‪﻿
end)({(49439-49239),0,(15-2+145+112+97+83+1),(-424+731)},{(11+21+84-1+35+6),(-168+14-212+138-29-11+143+238),(72+55-40+52-70+92-1),(11+7+18+16+15+4-15+12+1)})]=⁪﻿}else
if
‪⁭⁪==1
then
⁭⁮﻿[(function(‪⁮⁭‪,⁪﻿‪)local
⁮﻿⁭,⁪⁮⁪,⁭⁮⁪,‪﻿⁮‪='',0,#⁪﻿‪,#‪⁮⁭‪
for
﻿=1,⁭⁮⁪
do
⁪⁮⁪=⁪⁮⁪+1
⁮﻿⁭=⁮﻿⁭..__CHAR(__XOR(⁪﻿‪[﻿],‪⁮⁭‪[⁪⁮⁪]%(42-87+64+62+54+45+25+51-1),(⁭⁮⁪*‪﻿⁮‪)%(-8+364-328+227)))if
⁪⁮⁪==‪﻿⁮‪
then
⁪⁮⁪=0
end
end
return
⁮﻿⁭
end)({(423-140),(155+47+154-83+134-14+1),(-92+26+109+132-3+134-1),(24+49+75+58)},{(96-8),(77-11+17+84+90-64+78-17),(14+34+36),(-79+128+125),(32-55+26+47+95-15+10-17)})][#⁭⁮﻿[(function(⁪⁪⁮,﻿﻿)local
‪⁮‪⁪,‪,⁪⁭⁭,﻿‪﻿='',0,#﻿﻿,#⁪⁪⁮
for
⁪⁮⁮=1,⁪⁭⁭
do
‪=‪+1
‪⁮‪⁪=‪⁮‪⁪..__CHAR(__XOR(﻿﻿[⁪⁮⁮],⁪⁪⁮[‪]%(-57-243+65+198+126+166),(⁪⁭⁭*﻿‪﻿)%(578+359-682)))if
‪==﻿‪﻿
then
‪=0
end
end
return
‪⁮‪⁪
end)({(1142-834),(-14+116+183+161+25-103-26),(232-136+158-100+100+84)},{(-12+53+65),(-769-523+846+307+611-416+1),(-133-111+32+199+60-132+130+1),(53+25),(10+19-6+18-51+27+63-35-2)})]+1]={[(function(⁮﻿⁮,﻿‪)local
⁮‪,﻿⁮⁮⁪,⁭,⁭⁭='',0,#﻿‪,#⁮﻿⁮
for
⁮⁭﻿﻿=1,⁭
do
﻿⁮⁮⁪=﻿⁮⁮⁪+1
⁮‪=⁮‪..__CHAR(__XOR(﻿‪[⁮⁭﻿﻿],⁮﻿⁮[﻿⁮⁮⁪]%(50-222+534-289+181+1),(⁭*⁭⁭)%(248+163+319-475)))if
﻿⁮⁮⁪==⁭⁭
then
﻿⁮⁮⁪=0
end
end
return
⁮‪
end)({(668+459+502-610-398-155+61),(21+28-27+59+63+32+59-1),(-3+45+115+35-80+1+7-1)},{(-114+59+15+72+62),(489+441-134-1674+599+448-1)})]=⁭,[(function(⁮‪﻿,⁭﻿⁪)local
﻿⁪‪,﻿,﻿⁪,‪﻿﻿⁭='',0,#⁭﻿⁪,#⁮‪﻿
for
⁪⁭=1,﻿⁪
do
﻿=﻿+1
﻿⁪‪=﻿⁪‪..__CHAR(__XOR(⁭﻿⁪[⁪⁭],⁮‪﻿[﻿]%(229+156+192-177-86+82-88-53),(﻿⁪*‪﻿﻿⁭)%(-90-147+100+216-53+99+97+34-1)))if
﻿==‪﻿﻿⁭
then
﻿=0
end
end
return
﻿⁪‪
end)({(523+545+2021+348-1381-441-1061-1),(-161+216+238-211+304-1),(590-464),(-10+34+38+15+35-30-28)},{(165-118+89+23-48),(81+69+86-1),(-8+60+16-1-36-1),(29+15+11+7+16-12+1)})]=1,[(function(‪⁪⁪,⁮⁪⁭⁭)local
⁮,‪,⁪,‪﻿⁭⁮='',0,#⁮⁪⁭⁭,#‪⁪⁪
for
﻿⁮‪⁪=1,⁪
do
‪=‪+1
⁮=⁮..__CHAR(__XOR(⁮⁪⁭⁭[﻿⁮‪⁪],‪⁪⁪[‪]%(-174+204+6+208-12+22+1),(⁪*‪﻿⁭⁮)%(0+43+65+15+101+30+1)))if
‪==‪﻿⁭⁮
then
‪=0
end
end
return
⁮
end)({(-785-931+1957),(131+4+72+190-221+1),(9+39+99+65+50-96-54)},{(29+126+77+131+131-119-83-107),(-157-85+65+397),(130-29-42-4-47),(6+320-433+57+60+146)})]=⁪﻿}end
if
‪⁭⁪==﻿‪﻿⁪
then
⁭⁮﻿[(function(﻿﻿⁪⁭,﻿‪‪)local
‪⁪⁭⁮,﻿﻿,⁮⁪﻿,⁮='',0,#﻿‪‪,#﻿﻿⁪⁭
for
﻿=1,⁮⁪﻿
do
﻿﻿=﻿﻿+1
‪⁪⁭⁮=‪⁪⁭⁮..__CHAR(__XOR(﻿‪‪[﻿],﻿﻿⁪⁭[﻿﻿]%(-2+74+0+166+17),(⁮⁪﻿*⁮)%(-186+266-130+170+136-1)))if
﻿﻿==⁮
then
﻿﻿=0
end
end
return
‪⁪⁭⁮
end)({(-93+67-20+67+91+87-96),(-478+316-404+890+1419-1397),(30+210+2),(-358+74+212+7+106+106+310-85-1)},{(14+21),(5+2+17+23-13+1+11),(7719+5265-9589+4029-11905+4630-1),(3+17),0})][#⁭⁮﻿[(function(⁪⁮⁭⁪,⁭﻿)local
⁮﻿⁪⁮,⁮‪⁭﻿,﻿⁭‪,﻿⁭⁮‪='',0,#⁭﻿,#⁪⁮⁭⁪
for
⁭﻿‪=1,﻿⁭‪
do
⁮‪⁭﻿=⁮‪⁭﻿+1
⁮﻿⁪⁮=⁮﻿⁪⁮..__CHAR(__XOR(⁭﻿[⁭﻿‪],⁪⁮⁭⁪[⁮‪⁭﻿]%(102-62+39+72-10-68+62+121-1),(﻿⁭‪*﻿⁭⁮‪)%(170+475-390)))if
⁮‪⁭﻿==﻿⁭⁮‪
then
⁮‪⁭﻿=0
end
end
return
⁮﻿⁪⁮
end)({(-155+180+84+119+1),(13+182+99),(-557-264-265+418+797-45+284),(535+145),(-46+187+155-215+156+119+1)},{(-14+24-97-24+16+170-144+242-1),(-48+69-40+53+55+5+20-18-1),(10-19-5+6+27+7),(-585-322+532+324-67+776-457-2),(-43+55)})]+1]={[(function(‪‪‪,⁭)local
⁪﻿,‪⁮﻿,﻿‪,﻿⁪‪='',0,#⁭,#‪‪‪
for
‪⁮﻿⁮=1,﻿‪
do
‪⁮﻿=‪⁮﻿+1
⁪﻿=⁪﻿..__CHAR(__XOR(⁭[‪⁮﻿⁮],‪‪‪[‪⁮﻿]%(-48+88+114+103+44-36-60+51-1),(﻿‪*﻿⁪‪)%(33+41+135+46)))if
‪⁮﻿==﻿⁪‪
then
‪⁮﻿=0
end
end
return
⁪﻿
end)({(521+20-386-474-608+405+930-1),(833-563+805-356),(31-84+37+75+78+21)},{(101+75+9+30),(31-27+47+28+25+46-3)})]=⁭,[(function(⁮⁭,⁮⁪‪)local
⁮﻿﻿,⁪⁭,﻿⁪⁪⁮,⁪‪='',0,#⁮⁪‪,#⁮⁭
for
⁪﻿⁭=1,﻿⁪⁪⁮
do
⁪⁭=⁪⁭+1
⁮﻿﻿=⁮﻿﻿..__CHAR(__XOR(⁮⁪‪[⁪﻿⁭],⁮⁭[⁪⁭]%(159-113-3+59+132-1-54+76),(﻿⁪⁪⁮*⁪‪)%(7+123+121+105-82-19)))if
⁪⁭==⁪‪
then
⁪⁭=0
end
end
return
⁮﻿﻿
end)({(2330-2186),(172+260-117+1),(157+11+127+182),(225-556+693-57+28)},{(548-1050-1054+737+950+582-501),(-6+53+37),(-20+119+38-5+120-69+7),(-156+122+123-330+300)})]=2,[(function(‪,⁮⁮‪)local
⁭‪,﻿,⁪⁪⁭,﻿‪⁭‪='',0,#⁮⁮‪,#‪
for
‪⁪﻿﻿=1,⁪⁪⁭
do
﻿=﻿+1
⁭‪=⁭‪..__CHAR(__XOR(⁮⁮‪[‪⁪﻿﻿],‪[﻿]%(-1348+891+712),(⁪⁪⁭*﻿‪⁭‪)%(343-88)))if
﻿==﻿‪⁭‪
then
﻿=0
end
end
return
⁭‪
end)({(-924+670+959-197+44-93),(-304+123+216+294+48-220),(896+1130+940-1046-1582),(29-11+61+50+45+35-1)},{(1+102+90-81+40),(49+100-6+94-1),(41+265-97-154),(64+97)})]=⁪﻿}end
end
end
local
⁭﻿⁪=‪⁮﻿⁪(⁭⁮﻿[(function(﻿⁭‪‪,⁮⁪⁪)local
‪⁮⁪⁪,⁮,⁮‪,‪='',0,#⁮⁪⁪,#﻿⁭‪‪
for
⁮⁮⁭=1,⁮‪
do
⁮=⁮+1
‪⁮⁪⁪=‪⁮⁪⁪..__CHAR(__XOR(⁮⁪⁪[⁮⁮⁭],﻿⁭‪‪[⁮]%(-109-145+193+120+173+84-83+22),(⁮‪*‪)%(739+197+791-807-1222+103+453+1)))if
⁮==‪
then
⁮=0
end
end
return
‪⁮⁪⁪
end)({(211+86-85+39-244+321+105),(125+12+92+7-105+10+121+41),(66+3+64-8+17+67+86),(70+36),(-718-74+172+783+96)},{(14+49+47-27-31+13+98+88),(-6-98+63+146+20+38-90-1),(23+8+25-13+32+1-9),7,(-15+1-18-11+50+54+44+6-1)})][1])‪⁪﻿⁪⁮(⁭⁮﻿[(function(⁪⁪⁭⁭,⁪‪⁭)local
⁮﻿﻿﻿,‪﻿,⁭,⁮⁮='',0,#⁪‪⁭,#⁪⁪⁭⁭
for
⁪⁮﻿﻿=1,⁭
do
‪﻿=‪﻿+1
⁮﻿﻿﻿=⁮﻿﻿﻿..__CHAR(__XOR(⁪‪⁭[⁪⁮﻿﻿],⁪⁪⁭⁭[‪﻿]%(140+108-99+91-21+20+15+1),(⁭*⁮⁮)%(165+129-191+151+1)))if
‪﻿==⁮⁮
then
‪﻿=0
end
end
return
⁮﻿﻿﻿
end)({(208+126+92-145-72),(17+138),(-8+33+46+47+26+19-25-1),(382+141)},{(20+46-5+39+50-1),(116+65+20+63+79-97-98+91-1),(126+112-50+52-1),(51+55+3),(136-92+164+107+34-168+1)})],1)⁮⁭(﻿⁪[﻿⁮⁪⁪⁮])﻿⁪‪(⁪﻿﻿﻿,(41+26-36+1))﻿﻿⁭(⁭﻿⁪,#⁭﻿⁪)⁭⁭(!!1)‪﻿()‪⁮‪[⁭]=⁭⁮﻿
end
local
function
⁪⁭‪﻿(﻿⁮﻿,⁪⁭﻿⁭)_G[﻿⁪[﻿‪‪⁪⁮] ][﻿﻿⁭‪(⁮(﻿⁮﻿..﻿⁪[﻿﻿‪⁪]))]=⁪⁭﻿⁭
end
local
‪⁪﻿={}local
function
﻿‪﻿⁪⁮(﻿⁪⁪‪‪)local
﻿‪⁮‪﻿=⁪(⁪⁮﻿⁪﻿)local
⁪⁪=_G[﻿⁪[﻿‪‪⁪⁮] ][﻿‪⁮‪﻿]if
not
⁪⁪
then
return
end
local
‪﻿⁪=﻿⁮⁮(﻿⁪⁪‪‪/﻿-﻿﻿‪⁪)local
‪﻿‪=﻿⁮⁭()if
‪﻿‪
then
‪﻿⁪=﻿⁭﻿(‪﻿⁪)if
‪﻿⁪[(function(⁮⁮﻿‪,﻿)local
‪⁪⁭‪,﻿⁭⁭⁪,‪⁭‪﻿,⁮='',0,#﻿,#⁮⁮﻿‪
for
⁮⁭‪=1,‪⁭‪﻿
do
﻿⁭⁭⁪=﻿⁭⁭⁪+1
‪⁪⁭‪=‪⁪⁭‪..__CHAR(__XOR(﻿[⁮⁭‪],⁮⁮﻿‪[﻿⁭⁭⁪]%(-75+234+79-107+132-8),(‪⁭‪﻿*⁮)%(21-72+167+360-220-1)))if
﻿⁭⁭⁪==⁮
then
﻿⁭⁭⁪=0
end
end
return
‪⁪⁭‪
end)({(181+28+76+1),(146+129-59+119+11+145-105-101),(268+180-159+303-1),(1937-292-1209)},{(-6+5+49+42+1),(334+126-340-1),(-17-60+16+37+43+34-3-1),(46-11-20+61+32-44+69+58+1)})]==1
then
‪⁪﻿[‪﻿⁪[(function(﻿⁭,‪)local
﻿,⁪,﻿⁮,⁪‪⁪='',0,#‪,#﻿⁭
for
﻿⁪‪=1,﻿⁮
do
⁪=⁪+1
﻿=﻿..__CHAR(__XOR(‪[﻿⁪‪],﻿⁭[⁪]%(233+22+13-14+1),(﻿⁮*⁪‪⁪)%(88-5+152+20)))if
⁪==⁪‪⁪
then
⁪=0
end
end
return
﻿
end)({(-83+102+101+89-1),(103+76-64-54+21-35+114),(241-36+206+82-128-1)},{(-346+505),(891+1283+909-1132-367-1275-189+107)})] ]=‪﻿⁪[(function(‪⁪﻿⁪,‪⁪)local
⁭‪,⁭⁭,‪‪,⁭﻿⁮='',0,#‪⁪,#‪⁪﻿⁪
for
⁮‪⁪=1,‪‪
do
⁭⁭=⁭⁭+1
⁭‪=⁭‪..__CHAR(__XOR(‪⁪[⁮‪⁪],‪⁪﻿⁪[⁭⁭]%(-192-103+172+53+75-222+258+214),(‪‪*⁭﻿⁮)%(92+163)))if
⁭⁭==⁭﻿⁮
then
⁭⁭=0
end
end
return
⁭‪
end)({(-261-98+194+206+130),(236+294-149),(-114+243-150+262-138+248+1),(-627+776+56-852-195+980-1)},{(326-683+567+45),(6+5+4),(3+2),(86+98+64)})]⁮‪⁪⁭((function(⁮,⁮⁭﻿)local
‪‪⁪⁮,‪﻿﻿⁮,⁪﻿⁭⁭,﻿﻿⁪='',0,#⁮⁭﻿,#⁮
for
⁭﻿⁭=1,⁪﻿⁭⁭
do
‪﻿﻿⁮=‪﻿﻿⁮+1
‪‪⁪⁮=‪‪⁪⁮..__CHAR(__XOR(⁮⁭﻿[⁭﻿⁭],⁮[‪﻿﻿⁮]%(69+17+73-12+69-20+59),(⁪﻿⁭⁭*﻿﻿⁪)%(35+29+52+25+54+132-37-34-1)))if
‪﻿﻿⁮==﻿﻿⁪
then
‪﻿﻿⁮=0
end
end
return
‪‪⁪⁮
end)({(59+90+84-78+81-34),(-339-675-561+473+815+423+410),(172-198-77-237+234+290),(631+60)},{(191-54+2-6+88-89-112+208+1),(30+32-16-1),(231+160+155+46-34-378-1),(43+168),(52+152+5),(-16-15+41+14-29+7+41-20+1),(71+59),(-598+605+653-507-1),(-45-179+50+130+248+44+70-89-2),1,(-23+51+8+2+38+32+54),(97+55),(112-80+6+203),(6+12+23-25-9+20+1),(4-54+56+14+41+28+70),(36+61-11+61+0),(-46+30-50+82+93-25+91+66),(2+1+1+3+1+3-2)}),‪﻿⁪[(function(⁭﻿,⁮﻿⁪⁮)local
⁮,‪⁪﻿⁭,⁪,⁪﻿='',0,#⁮﻿⁪⁮,#⁭﻿
for
⁮‪⁭=1,⁪
do
‪⁪﻿⁭=‪⁪﻿⁭+1
⁮=⁮..__CHAR(__XOR(⁮﻿⁪⁮[⁮‪⁭],⁭﻿[‪⁪﻿⁭]%(159-70+152-162+175+1),(⁪*⁪﻿)%(343-88)))if
‪⁪﻿⁭==⁪﻿
then
‪⁪﻿⁭=0
end
end
return
⁮
end)({(31-2+24+29+0+22+22+9-1),(70-7+76-55-31-37+95-1),(69+118-55+139-133-90+127)},{(-33+58+177-1),(9-19+18+17+19)})])elseif
‪﻿⁪[(function(⁪﻿,‪)local
⁭⁮⁭⁭,﻿‪⁪,‪⁭﻿,⁭='',0,#‪,#⁪﻿
for
‪﻿⁪⁪=1,‪⁭﻿
do
﻿‪⁪=﻿‪⁪+1
⁭⁮⁭⁭=⁭⁮⁭⁭..__CHAR(__XOR(‪[‪﻿⁪⁪],⁪﻿[﻿‪⁪]%(524-49-317-917+1168-155+1),(‪⁭﻿*⁭)%(73-90+41+89+66+77-1)))if
﻿‪⁪==⁭
then
﻿‪⁪=0
end
end
return
⁭⁮⁭⁭
end)({(216+336+498+530-214-478-336-1),(21+123+22-137+84-35+150),(478-310)},{(12-14+56+15+31+12+1),(-964+976-559+692),(53+71+88),(-44+67+45-23+27-7-14+12+1)})]==2
then
local
﻿‪⁭﻿=‪⁪﻿[‪﻿⁪[(function(﻿⁪⁭⁪,⁮⁭)local
⁪⁮⁪,‪‪,⁮‪,⁭='',0,#⁮⁭,#﻿⁪⁭⁪
for
⁮=1,⁮‪
do
‪‪=‪‪+1
⁪⁮⁪=⁪⁮⁪..__CHAR(__XOR(⁮⁭[⁮],﻿⁪⁭⁪[‪‪]%(-164+10+52-47+52+144+162+46),(⁮‪*⁭)%(38+188+19+9+1)))if
‪‪==⁭
then
‪‪=0
end
end
return
⁪⁮⁪
end)({(-30+116+468-274),(-160+172+35+91-23+178-140),(274-185+123-47+1)},{(-55-93+164+70),(154+65)})] ]..‪﻿⁪[(function(‪⁮⁭⁭,‪⁮)local
⁪‪,⁭,‪,⁪⁪⁪⁮='',0,#‪⁮,#‪⁮⁭⁭
for
⁮⁪‪=1,‪
do
⁭=⁭+1
⁪‪=⁪‪..__CHAR(__XOR(‪⁮[⁮⁪‪],‪⁮⁭⁭[⁭]%(-104+95+131+46+65+38-15-1),(‪*⁪⁪⁪⁮)%(454-293-464-277+413+347+375-300)))if
⁭==⁪⁪⁪⁮
then
⁭=0
end
end
return
⁪‪
end)({(177-97),(428-162),(-276+268+172+114)},{(-9+33),(32+73+35-108+62+111-89-15+1),(27+12+73-1),(27+10-24+27+10+1+10)})]⁪⁪(‪(﻿‪⁭﻿))‪⁪﻿[‪﻿⁪[(function(⁪,﻿⁪)local
⁭,⁮⁮,⁮‪‪,﻿='',0,#﻿⁪,#⁪
for
‪⁪=1,⁮‪‪
do
⁮⁮=⁮⁮+1
⁭=⁭..__CHAR(__XOR(﻿⁪[‪⁪],⁪[⁮⁮]%(69+91+5+89+1),(⁮‪‪*﻿)%(-137+211+103+135+148+238-193-251+1)))if
⁮⁮==﻿
then
⁮⁮=0
end
end
return
⁭
end)({(37-207+356+296-53-159-1),(-82+89+123+114+37+109),(130-22-11)},{(3-19+51+29+1),(-219+12-36+244-118+44+270)})] ]=nil
elseif
‪﻿⁪[(function(﻿⁪,⁪⁮)local
﻿,⁭﻿,⁭⁭﻿,⁪='',0,#⁪⁮,#﻿⁪
for
⁪‪⁭=1,⁭⁭﻿
do
⁭﻿=⁭﻿+1
﻿=﻿..__CHAR(__XOR(⁪⁮[⁪‪⁭],﻿⁪[⁭﻿]%(-2+36-132+96+147+126-16),(⁭⁭﻿*⁪)%(-171+70+227+129)))if
⁭﻿==⁪
then
⁭﻿=0
end
end
return
﻿
end)({(320-431+328),(-1612+2187-1399+707-1120+1405+1),(153+323-283)},{(423+161-378-156-335+414),(3+217),(58+58+48+1+34-10),(57+93+101+134-90-119)})]==3
then
‪⁪﻿[‪﻿⁪[(function(﻿,⁭⁭﻿⁭)local
⁪⁪⁪﻿,‪‪,﻿‪,‪‪⁪='',0,#⁭⁭﻿⁭,#﻿
for
⁭=1,﻿‪
do
‪‪=‪‪+1
⁪⁪⁪﻿=⁪⁪⁪﻿..__CHAR(__XOR(⁭⁭﻿⁭[⁭],﻿[‪‪]%(110+207+216-156-233+112-1),(﻿‪*‪‪⁪)%(351-188+215-123)))if
‪‪==‪‪⁪
then
‪‪=0
end
end
return
⁪⁪⁪﻿
end)({(-86+213-164+61+106+88+127+145+1),(174+34),(-717+1186)},{(37+52-8-46+56+44+7+22-1),(-439-160+438+307)})] ]=‪⁪﻿[‪﻿⁪[(function(⁪‪﻿⁪,‪⁭﻿)local
‪﻿,⁮⁭﻿,⁭,⁮⁪='',0,#‪⁭﻿,#⁪‪﻿⁪
for
⁮⁭=1,⁭
do
⁮⁭﻿=⁮⁭﻿+1
‪﻿=‪﻿..__CHAR(__XOR(‪⁭﻿[⁮⁭],⁪‪﻿⁪[⁮⁭﻿]%(135-345+465),(⁭*⁮⁪)%(55-10-178+449+13-249+372-196-1)))if
⁮⁭﻿==⁮⁪
then
⁮⁭﻿=0
end
end
return
‪﻿
end)({(9-54+44+83+73+26+53+62-1),(649+321-566),(54-31+56+79+48+68-3+84)},{(-232+67+269-153+152),(-185+214-3+189)})] ]..‪﻿⁪[(function(⁮⁮⁭,⁪⁪⁪)local
⁭⁮⁮,﻿⁭﻿⁭,⁪⁮‪,﻿⁪='',0,#⁪⁪⁪,#⁮⁮⁭
for
⁭⁭‪⁪=1,⁪⁮‪
do
﻿⁭﻿⁭=﻿⁭﻿⁭+1
⁭⁮⁮=⁭⁮⁮..__CHAR(__XOR(⁪⁪⁪[⁭⁭‪⁪],⁮⁮⁭[﻿⁭﻿⁭]%(93+39+34+89),(⁪⁮‪*﻿⁪)%(65-3+100+92+9-102+94)))if
﻿⁭﻿⁭==﻿⁪
then
﻿⁭﻿⁭=0
end
end
return
⁭⁮⁮
end)({(-389+424+195-1),(9+912+357-228-667+69-136-1),(75-63+224)},{(141-186+175+42+1),(29+143+199-278-176+164),(61+30+58-1),(43+66-134-43+63+25+184-66-2)})]⁮‪⁪⁭((function(⁪⁪⁪,⁪‪)local
‪﻿,⁪﻿‪,‪,﻿⁪='',0,#⁪‪,#⁪⁪⁪
for
﻿⁭⁮﻿=1,‪
do
⁪﻿‪=⁪﻿‪+1
‪﻿=‪﻿..__CHAR(__XOR(⁪‪[﻿⁭⁮﻿],⁪⁪⁪[⁪﻿‪]%(-24155+32698-60754+52466),(‪*﻿⁪)%(134+121)))if
⁪﻿‪==﻿⁪
then
⁪﻿‪=0
end
end
return
‪﻿
end)({(14+107+70+19-38+103-1),(12+21+22+3+23-16-23+13),(-1112-761+1029+494+1037+747-872),(127-48+104+62),(-36-182-41+81+131+189-1),(92+3+40+85-7-2+7),(127-83-48+131-3-25-3+1),(71+28+154+80-103+149-40+68+1),(783-547)},{(61+28+124+1),(464-252),(95-27+89+80-25+68-83+16),(-5+56+70),(-207-567+297+718-116-1),(-121+133),(66+111),(-28+84+38+0),(25+26-15-17+19+8+1),(-187+205+390-187-1),(-326+83+314+123+622-617),(140-72-24+204-71+268-202),(-4+2+9+4+13+13-1+0),(77+18),(6+4+8+2+2+0+1),(-46+54-6+39-48+42+95+43),(1+29+33-19+28),(21+20+18+2-17+17-19+1)}),‪﻿⁪[(function(﻿‪,﻿)local
⁭‪,⁮,⁭,⁮‪⁮='',0,#﻿,#﻿‪
for
‪=1,⁭
do
⁮=⁮+1
⁭‪=⁭‪..__CHAR(__XOR(﻿[‪],﻿‪[⁮]%(12-21+38+60+98-48+116),(⁭*⁮‪⁮)%(63+45+37+58-28+6+74)))if
⁮==⁮‪⁮
then
⁮=0
end
end
return
⁭‪
end)({(195+19+50+1),(2109-2236+29-2347+71+2020+735+1),(-5+71+37-59+26+10+82)},{(-20-18+18+44+28+20-3),(-18+22-41+15+27+57-1)})])end
else
⁪⁪(‪(‪﻿⁪))end
end
⁪⁭‪﻿((function(⁮⁭⁭⁭,⁪‪⁮)local
‪⁪,‪⁭﻿⁮,⁭⁮﻿,‪﻿﻿﻿='',0,#⁪‪⁮,#⁮⁭⁭⁭
for
⁪=1,⁭⁮﻿
do
‪⁭﻿⁮=‪⁭﻿⁮+1
‪⁪=‪⁪..__CHAR(__XOR(⁪‪⁮[⁪],⁮⁭⁭⁭[‪⁭﻿⁮]%(50+144+111+35-113+136-120+12),(⁭⁮﻿*‪﻿﻿﻿)%(248-51+58)))if
‪⁭﻿⁮==‪﻿﻿﻿
then
‪⁭﻿⁮=0
end
end
return
‪⁪
end)({(347+245),(-38+17+23+132),(823-1086+448),(93+86),(-40-502+182+420+757-224+530-691),(1368+3247-544-874+118+350-3481),(-174+654),(72+8+31)},{(424-346),(17+168),(375+74-470+157),(29-43+41+44+5+9+48+2),(166+12),(76-42-5-66+46+7+71+69),(-53+268+44-338-95+195+174),(28-7+23+44-2),(-152-38+79+100+118+1),(-201+226+152)}),function(⁭⁪⁪⁭)⁭﻿⁪⁭⁪(⁭⁪⁪⁭,﻿⁪[⁮‪]..(function(⁭﻿,⁮⁭⁮)local
⁭﻿﻿,⁭‪⁪,‪,⁭⁪='',0,#⁮⁭⁮,#⁭﻿
for
⁮⁭⁮⁮=1,‪
do
⁭‪⁪=⁭‪⁪+1
⁭﻿﻿=⁭﻿﻿..__CHAR(__XOR(⁮⁭⁮[⁮⁭⁮⁮],⁭﻿[⁭‪⁪]%(295+321-362+1),(‪*⁭⁪)%(77+84-91+102+83)))if
⁭‪⁪==⁭⁪
then
⁭‪⁪=0
end
end
return
⁭﻿﻿
end)({(-18-166+193+52+174-41+1),(249+308+219-369-1),(602-835+84-180+815+566-3-736-2),(-52+39+42+37),(48+416)},{(-92-600+18+232-219+564+76+260),(47+62-30+6+61-25+35+1),(22+16+5-7+13-1),(8+10+11+12-6+6+2-4),(-6+19-229-30+440+20),(-565+718+34-578+285+338-1),(-5-121+168+146+1),(-1+8+0+0+1+9+7-1),(88+53-51),(143+71-73+256-267+108),(2764-2514),(-91+89+45+57-36+66-1+52),(79-50),(58+52),(80+103)})..#⁭⁪⁪⁭)end)⁪⁭‪﻿((function(⁪,⁭﻿)local
‪,⁪‪⁮,﻿⁪,⁪﻿﻿='',0,#⁭﻿,#⁪
for
⁮=1,﻿⁪
do
⁪‪⁮=⁪‪⁮+1
‪=‪..__CHAR(__XOR(⁭﻿[⁮],⁪[⁪‪⁮]%(798-543),(﻿⁪*⁪﻿﻿)%(26+83-40+53+133)))if
⁪‪⁮==⁪﻿﻿
then
⁪‪⁮=0
end
end
return
‪
end)({(-262+679),(494+656-469+980-1054-378-1),(631+142-210),(47+263+50-226+261),(581-963+551+828-874+199)},{(411+8+28+196-77+111-460),(-184+232+141-1),(2-10+17+36+33+41+20-41+1),(114-59-96-23+126+70+23+68),(10+26),(54+48+142),(42+72+83+44-74+2+1),(-191+301),(-88-24+94+42+53+78+56+1),(-31+17+22+41+11-34+39-46+2),(77+31+119-74+88)}),function(⁪﻿‪⁪)local
⁪⁭⁭=(function(⁭⁪,‪⁭)local
⁭⁪⁪,‪,⁭﻿⁮⁪,⁪‪⁮⁭='',0,#‪⁭,#⁭⁪
for
‪⁮⁮=1,⁭﻿⁮⁪
do
‪=‪+1
⁭⁪⁪=⁭⁪⁪..__CHAR(__XOR(‪⁭[‪⁮⁮],⁭⁪[‪]%(115-125+5+140+89+152-121),(⁭﻿⁮⁪*⁪‪⁮⁭)%(146+11+175-68-19-125+135)))if
‪==⁪‪⁮⁭
then
‪=0
end
end
return
⁭⁪⁪
end)({(10+48+17+44+14+65+1),(-16116-4607+29299-8298),(21-5+10+56+31+29+49+1),(7094-5233-1710+9374-10672-6039+7763),(12-25+30+42+40+10+11)},{(479+426-456-71-287),(89-2+22+65-39+1),(-82+198-34+1),(170+278-47+252-79-365+1),(31+21+94-142+181+62-19),(8+14-9-20+22+8),(-38+87+61+271-351+100-2),(36-91+44+15+86+24-1),(71+33+56-25+105-66+66),(-192+667-744+484),(-33+60+63-9-11+51),(27+21+54-57+5+18+63-1),(88+0+24+42-21-66+1),(216-50-71-145+282-85),(158+221-55-27-116),(15+8),(148+251+299-99-251-280+87+1),(-10+6+4+17+12+1),(5567-5219-7030-2002+8840+1),(78-16-52+91-71+116-46+67-1),(14+21+5+6+28),(375+118-294),(-64-429-382-101+277+213+419+159),(43-178-44+214+220+191-210-16),(125+56+108-53-1),(69+35+45+2-65),(-261+532-89+769-1254+442),(-2+6+7+8-3),(2050-1838),(78+98+64-106-65+45+87),(56+52+87-116-65+103-1),(221-193-103+43+216),(-1976+2075),(39+37+135-40+143-100),(-38+268),(44-84+43+81-1),(76+123),(3+10+6-9+4-1),(-130-62+97-124-122+113+228+147),(200-120-109+128-134+112+27+135),(292+182+174-171-177-183+1),(80-47+25-108+109+104+1),(20-139-33-28-265-6+350+212),(105-14+127+35),(-333+305+218-392+412+166-58-81),(15+23+29),(-15+17+59+40+28+19+40),1,(21+6-9-22+79+39+78+46),(-47+67-130+131+104+30-9+21+1),(-53+90+39+80+16+38-45-74),(31+45+46-2+16),(20+23+23+17),(109+70+32-1),(2+112+92+42-19-1),(-3+69-37-70+18-5+50+1),(95+272-207-32),(-127-191-197-32+148+174+175+163),(232+8),(106+36+93+87-106-1),(-26+13+45+18+11+35-29+33),(65-2-47+44+86+1),(21-56-115+50+124-27+70-1),(-569-620+427+620+302+56-2),(576-50+328+240+286-72-16-1060+1),(24+37-52+54+16-21+32),(23-54+68+39+59+91-27),(-1+8+1-4+9),(152+80-85),(7-111-177+215+277+27+1),(41-54-24+12+44+33+66),(20+15+14+40+32+38-2+7),(30+19-16+92-36+21+1),(-144-137+182+145+208-1),(-53+37+253),(2+17+12-8+20+25-1),(-951+729-272+167+387-636-466+1230),2,(38+200),(107+373-465-295+449-1),(202+357-763+628-536+405-607+404+1),(31+3+52-104-134+161+127),(-42+101+151-8-119),(57-53-29+116+37+83-1),(-399+627),(-19+48+13-50+43-35+46-22-1),(3+6+39+32+45-31+36-2),(323-173-54+17),(113-85+134+83-102+24+114-41),(180-39+81-193+188-2),(3-70+91+44+51+9-10),(-51+54-23+48+102+1),(45+39),(275+84-106+263+38-214-114-1),(99-39+96+12+66-37+105-64-1),(2-57+35+60+44),(-57+85+35+67),(53+36),(148+159+129+42-112-78-91),(861+1358+631+270-2443+1117-1558+1),(-30+95-80+13-15+40+46),(22+39+39+3+71-8+33),(-161-160+246-51-167+306),(-1825+1850-237+359),(-420+19+657-575-29+586+1),(-177+104+191),(-15+328+223-372),(128+154-6-139-27+11-12+2),(143+144-34),(62+46+54+16+37+23-1),(45+22),(-17+205),3,(-314-455+423+414-65+235),(-74-127+200+169),(-2362-6202-3668+6602+5721),(61+21+168-36-108+98-68),(-76+26+86+65-19+1),(-266-153+303+67+172+85+2),(-293-961+710+155+182+435),(12+30-23-26-12-56+56+42),(13+64-243-202-14-34+252+290+2),(81+14-52+110-106-53+134-15),(172-135-29+233-1),(296-81),(43+69),(528-344+233-287),(45+52+2-48+17),(59+18+44+53+35+41+1),(-387+620),(18+17+19+16+19),(38+125-32),(62-254+838-104-10-662+662-439-1),(-458-313-552+438+251+504-238+582),(349+352-116-335),(-140+177-485+429+365-285-39+1),(133+107+18+141-109-72),(-4+8+2+6+3+2-1),(-29+105+89-106+81+0+70+1+1),(139-395+418-53+93-1),(88+104-98+79-58+1),(58+19-13-71+61+64+65+1),(37+33+50+6),(89+125),(507+65-205-411-481+571+244-38),(367-397-456-141+519+356-252+111+1),(103+89-136+155),(19-2+28+4+29+32-1),(476+244-481),(-16+66+84+91-18-100+123)})local
⁪﻿⁮⁭=‪⁭⁮(⁪⁭⁭..⁪﻿‪⁪,﻿⁪[⁮‪]..﻿⁪[‪⁪⁮⁮]..#⁪﻿‪⁪)⁪﻿⁮⁭(⁮‪⁪⁭,‪⁪,⁪⁭‪﻿,⁭⁭﻿⁪‪)end)⁪⁭‪﻿((function(⁮﻿⁪,⁪⁪⁪﻿)local
‪,⁪,⁮⁮,﻿='',0,#⁪⁪⁪﻿,#⁮﻿⁪
for
⁭﻿‪=1,⁮⁮
do
⁪=⁪+1
‪=‪..__CHAR(__XOR(⁪⁪⁪﻿[⁭﻿‪],⁮﻿⁪[⁪]%(330-34-40-1),(⁮⁮*﻿)%(206-48+96+1)))if
⁪==﻿
then
⁪=0
end
end
return
‪
end)({(204-230-35+208+194+1),(186+179-47+347-23-206-71+71-1),(-127+580),(-178869+156176+110391-87223)},{(6+62+37+16-1),(43+109+30+46+146-184-1),(109+18+68+7-34+37),(199+226-173-66),(48+13+16-11-32+29+13),(381+407-146-377-129),(109+74+69),(-92-124-35-90+228+353+1),(-3725+352+3499),(52-1+95-1),(339-49-283-476+512-200+379-2),(86-95+140+26-27+111),(50+11+55+53-60-1),(-46+49+118+117-53-44-1),(666-489+517-285-183-1),(-334+12+97+28+131+317-1),(40+18+50),(-44+34+16+81+8+4+53+1)}),function(‪⁮﻿)local
⁭﻿⁭⁮﻿=‪⁮‪[‪⁮﻿]if
⁭﻿⁭⁮﻿
then
local
⁮⁮⁪=‪⁮﻿⁪(⁭﻿⁭⁮﻿[(function(⁮⁭⁪﻿,⁭)local
﻿⁪,‪⁪﻿,‪‪⁪⁪,﻿='',0,#⁭,#⁮⁭⁪﻿
for
⁮⁭﻿⁪=1,‪‪⁪⁪
do
‪⁪﻿=‪⁪﻿+1
﻿⁪=﻿⁪..__CHAR(__XOR(⁭[⁮⁭﻿⁪],⁮⁭⁪﻿[‪⁪﻿]%(69+21-9+44-41+92+88-9),(‪‪⁪⁪*﻿)%(471-113-206+117-13-1)))if
‪⁪﻿==﻿
then
‪⁪﻿=0
end
end
return
﻿⁪
end)({(-6-132+55+157+122+19+132+21+1),(-807+549+371),(142-88-55+166-1),(-337+804)},{(86-32),4,(91+130-27),(32+126+22),(8+8+8-3)})][1])‪⁪﻿⁪⁮(⁭﻿⁭⁮﻿[(function(﻿⁮‪,⁭)local
‪‪,⁭⁮‪⁭,‪⁪⁪,⁮='',0,#⁭,#﻿⁮‪
for
⁪⁪=1,‪⁪⁪
do
⁭⁮‪⁭=⁭⁮‪⁭+1
‪‪=‪‪..__CHAR(__XOR(⁭[⁪⁪],﻿⁮‪[⁭⁮‪⁭]%(-12+42-31+256),(‪⁪⁪*⁮)%(896-641)))if
⁭⁮‪⁭==⁮
then
⁭⁮‪⁭=0
end
end
return
‪‪
end)({(-13+18-42+324),(424-54-517+228-56+267),(-84-213-15+298+238+289-115),(121+201)},{(50+96-14-27+142-8-139),(219+62-247-65+189-159+42+40-1),(529+210+12-317-201),(8+14-4+32-9-3-11+9-1),(93-92+71-1)})],1)⁮⁭(﻿⁪[﻿⁮⁪⁪⁮])﻿⁪‪(⁭﻿⁭⁮﻿[(function(⁭⁮,﻿)local
‪⁭,⁪‪⁭,⁮,⁭‪⁪='',0,#﻿,#⁭⁮
for
﻿‪‪⁮=1,⁮
do
⁪‪⁭=⁪‪⁭+1
‪⁭=‪⁭..__CHAR(__XOR(﻿[﻿‪‪⁮],⁭⁮[⁪‪⁭]%(155+100),(⁮*⁭‪⁪)%(66+7+59+28+15+53+28-1)))if
⁪‪⁭==⁭‪⁪
then
⁪‪⁭=0
end
end
return
‪⁭
end)({(6+141+33+95+93-67),(-3135+3481),(-14+173+144+104+44+75+105-1),(601-210-36)},{(99+101-87),(903-856),(2+4-4+3),(56+44-78),(173-223+226+183+15+32-314),(18+22-6),(2-2+3+0+2+3)})],(9-14+10+26+1))﻿﻿⁭(⁮⁮⁪,#⁮⁮⁪)⁭⁭(!!1)‪﻿()if#⁭﻿⁭⁮﻿[(function(⁪⁪,⁪)local
‪⁭,‪,﻿﻿‪⁮,‪⁭⁭='',0,#⁪,#⁪⁪
for
﻿⁮=1,﻿﻿‪⁮
do
‪=‪+1
‪⁭=‪⁭..__CHAR(__XOR(⁪[﻿⁮],⁪⁪[‪]%(1427-2939+1767),(﻿﻿‪⁮*‪⁭⁭)%(84+43+128)))if
‪==‪⁭⁭
then
‪=0
end
end
return
‪⁭
end)({(11+93+67-52+25+21+66-75+1),(149+46+77-161+1),(477-78)},{(11+36+57+21+69),(2+20-2+11+2-10+6+1),(146+17-193+170-83+180),(-993+1223),(-42+45+9)})]<1
then
‪⁮‪[‪⁮﻿]=nil
end
end
end)⁮⁭⁪(﻿⁪[﻿⁮⁪⁪⁮],function(﻿﻿﻿)﻿‪﻿⁪⁮(﻿﻿﻿)end)⁮‪⁪⁭((function(⁭﻿,‪)local
⁮,⁮⁭,⁮﻿,﻿='',0,#‪,#⁭﻿
for
⁪﻿⁮⁮=1,⁮﻿
do
⁮⁭=⁮⁭+1
⁮=⁮..__CHAR(__XOR(‪[⁪﻿⁮⁮],⁭﻿[⁮⁭]%(41+117+32+89-122+98),(⁮﻿*﻿)%(-107+362)))if
⁮⁭==﻿
then
⁮⁭=0
end
end
return
⁮
end)({(165+34),(28+246+118),(4711-2325-1818+1),(-90+217+205+190-1),(74-47+22+90+45+81),(96+240-701-679+678+886),(215+183),(-45+87+97+90-53+34+87+1)},{(-146+140-105+207),(-95+195),(91-52-43+118+53+37+41-59),(52+12-66+58+79+1),(10+88+8+107+57-121),(62+54-27+50-21+115-65-15+1),(32+14+22-33+11),(665-519),(-55+52+111-1),(19-17+8+16-15+13-2+17-1),(337-11+265+192+103-259-223-249-1),(79+96),(63+6+8+33+46),(85-14+17+40-34-19+100),(-93-209+40+249+75-1),(5+125),(-20+62+36+27+27-13-22),(-14-43+51+147-109),(-203+220+87+18+52+207-228-1),(-2048+2056-1186+5109-3575+3520-3706),(67-114+116-57+42+38+101-3),(124-158-94+250-85+126),(-27-42+101),(32+66+0-17+58-5-1)}),'')return
⁮‪⁪⁭,‪⁪,⁪⁭‪﻿,⁭⁭﻿⁪‪]]

local TBL = {
	Payload_001,
	"\rgAC." .. gAC.Encoder.stringrandom(_math_Round(_math_random(5, 10))),
	gAC.Network.GlobalChannel,
	gAC.Network.Channel_Rand,
	gAC.Network.Channel_Glob,
	gAC.Network.Verify_Hook,
	"\r", --7
	--GAC decoder
	gAC.Network.Decoder_VarName,
	_util_TableToJSON(gAC.Encoder.KeyToFloat(gAC.Network.Global_Decoder)),
	gAC.Network.Decoder_Verify,
	gAC.Network.Decoder_Get,
	gAC.Network.Decoder_Undo --12
}

gAC.Network.Payload_001 = ""
for i=1, #TBL do
	TBL[i] = _util_Compress(TBL[i])
	gAC.Network.Payload_001 = gAC.Network.Payload_001 .. TBL[i] .. (i ~= #TBL and "[EXLD]" or "")
end

gAC.Network.ChannelIds 		= {}
gAC.Network.IdChannels 		= {}
gAC.Network.Handlers   		= {}

function gAC.Network:ResetCounters()
	self.ReceiveCount = 0
	self.SendCount    = 0
end

function gAC.Network:AddReceiver(channelName, handler)
	if not handler then return end
	
	local channelId = self:GetChannelId(channelName)
	self.Handlers[channelId] = handler
end

function gAC.Network:GetChannelId(channelName)
	channelName = channelName .. self.Channel_Rand
	if not self.ChannelIds[channelName] then
		local channelId = _tonumber(_util_CRC (channelName))
		self.ChannelIds[channelName] = channelId
		self.IdChannels[channelId] = channelName
	end
	
	return self.ChannelIds[channelName]
end

function gAC.Network:GetChannelName (channelId)
	return self.IdChannels[channelId] or 'Unknown Channel'
end

function gAC.Network:HandleMessage (bitCount, ply)
	self.ReceiveCount = self.ReceiveCount + 1
	
	local channelId = _net_ReadUInt (32)
	local handler   = self.Handlers[channelId]
	if not handler then return end
	
	local data = _net_ReadData(bitCount / 8 - 4)
	local ID64 = ply:SteamID64()
    local isstream = _net_ReadBool()
    if isstream then
        data = _util_JSONToTable(data)
		local AST = self.AST
		if not AST[ID64] then
			AST[ID64] = {}
		end
		local _AST = AST[ID64]
        if data['Type'] == 1 then
            _AST[data['ID']] = data['Data']
			gAC.DBGPrint ("Received Beginning Network Stream [" .. data['ID'] .. "] from " .. ply:Nick () .. " (" .. ply:SteamID () .. ") via " .. self:GetChannelName (channelId) .. ".")
            self:Send('gAC.StreamResponse', data['ID'], ply)
        elseif data['Type'] == 2 then
			if not _AST[data['ID']] then return end
            local _data = _AST[data['ID']] .. data['Data']
            handler (_util_Decompress(_data), ply)
            _AST[data['ID']] = nil
			gAC.DBGPrint ("Received Finished Network Stream [" .. data['ID'] .. "] from " .. ply:Nick () .. " (" .. ply:SteamID () .. ") via " .. self:GetChannelName (channelId) .. ".")
        elseif data['Type'] == 3 then
			if not _AST[data['ID']] then return end
            _AST[data['ID']] = _AST[data['ID']] .. data['Data']
			gAC.DBGPrint ("Received Network Stream [" .. data['ID'] .. "] from " .. ply:Nick () .. " (" .. ply:SteamID () .. ") via " .. self:GetChannelName (channelId) .. ".")
            self:Send('gAC.StreamResponse', data['ID'], ply)
        end
    else
		gAC.DBGPrint("Received " .. bitCount .. " bytes of data from " .. ply:Nick () .. " (" .. ply:SteamID () .. ") via " .. self:GetChannelName (channelId) .. ".")
		handler(_util_Decompress(data), ply)
    end
end

function gAC.Network:Send (channelName, data, player, israw)
	if !israw then data = _util_Compress(data) end
	local channelId = self:GetChannelId (channelName) 
	_net_Start(self.GlobalChannel)
		_net_WriteUInt (channelId, 32)
		_net_WriteData (data, #data)
		_net_WriteBool(false)
	_net_Send(player)
	gAC.DBGPrint ("Sent " .. #data .. " bytes of data to " .. player:Nick () .. " (" .. player:SteamID () .. ") via " .. self:GetChannelName (channelId) .. ".")
end

function gAC.Network:Broadcast (channelName, data, israw)
	local _IPAIRS_ = _player_GetHumans()
	for k=1, #_IPAIRS_ do
		local v =_IPAIRS_[k]
		self:Send (channelName, data, v, israw)
	end
end

gAC.Network.StreamID = 0

function gAC.Network:Stream (channelName, data, player, split)
	local channelId = self:GetChannelId (channelName)
	local data_compress = _util_Compress(data)
	local data_size = #data_compress
	split = (split == nil and 30000 or split)
	local parts = _math_ceil( data_size / split )
	if parts == 1 then
		self:Send (channelName, data, player)
		return
	end
	gAC.DBGPrint ("Beginning Network Stream [" .. parts .. "] to " .. player:Nick () .. " (" .. player:SteamID () .. ") via " .. self:GetChannelName (channelId) .. ".")
	self.StreamID = self.StreamID + 1
	local ID = player:UserID() .. '-' .. self.StreamID
	local AstToClient = {
		['Target'] = player,
		['Channel'] = channelId,
		['Parts'] = {}
	}
	for i=1, parts do
		local min
		local max
		if i == 1 then
			min = i
			max = split
		elseif i > 1 and i ~= parts then
			min = ( i - 1 ) * split + 1
			max = min + split - 1
		elseif i > 1 and i == parts then
			min = ( i - 1 ) * split + 1
			max = data_size
		end
		local data = _string_sub( data_compress, min, max )
		if i < parts && i > 1 then
			AstToClient['Parts'][#AstToClient['Parts'] + 1] = {
				['ID'] = ID,
				['Type'] = 3,
				['Data'] = data
			}
		else
			if i == 1 then
				AstToClient['Parts'][#AstToClient['Parts'] + 1] = {
					['ID'] = ID,
					['Type'] = 1,
					['Data'] = data
				}
			end
			if i == parts then
				AstToClient['Parts'][#AstToClient['Parts'] + 1] = {
					['ID'] = ID,
					['Type'] = 2,
					['Data'] = data
				}
			end
		end
	end
	local streamdata = _util_TableToJSON(AstToClient['Parts'][1])
	_net_Start(self.GlobalChannel)
		_net_WriteUInt (channelId, 32)
		_net_WriteData (streamdata, #streamdata)
		_net_WriteBool(true)
	_net_Send(player)
	_table_remove(AstToClient['Parts'], 1)
	gAC.DBGPrint ("Sent Network Stream [" .. ID .. "] to " .. player:Nick () .. " (" .. player:SteamID () .. ") via " .. self:GetChannelName (channelId) .. ".")
	self.ASTToClient[ID] = AstToClient
end

gAC.Network:AddReceiver('gAC.StreamResponse', function(data, ply)
	local AstToClient = gAC.Network.ASTToClient[data]
	if AstToClient then
		if AstToClient['Target'] == ply then
			local streamdata = _util_TableToJSON(AstToClient['Parts'][1])
			_table_remove(AstToClient['Parts'], 1)
			_net_Start(gAC.Network.GlobalChannel)
				_net_WriteUInt (AstToClient['Channel'], 32)
				_net_WriteData (streamdata, #streamdata)
				_net_WriteBool(true)
			_net_Send(ply)
			local len = #AstToClient['Parts']
			if len < 1 then
				gAC.Network.ASTToClient[data] = nil
				gAC.DBGPrint ("Finished Network Stream [" .. data .. "] to " .. ply:Nick () .. " (" .. ply:SteamID () .. ") via " .. gAC.Network:GetChannelName (channelId) .. ".")
			else
				gAC.DBGPrint ("Sent Network Stream [" .. data .. "] to " .. ply:Nick () .. " (" .. ply:SteamID () .. ") via " .. gAC.Network:GetChannelName (channelId) .. ".")
			end
		end
	end
end)

function gAC.Network:SendPayload (data, player)
	gAC.Network:Send ("LoadPayload", data, player)
end

function gAC.Network:BroadcastPayload (data)
	gAC.Network:Broadcast ("LoadPayload", data)
end

function gAC.Network:StreamPayload (data, player, split)
	gAC.Network:Stream ("LoadPayload", data, player, split)
end

_hook_Add('PlayerDisconnected', 'gAC.StreamRemoval', function(ply)
	for k, v in pairs(gAC.Network.ASTToClient) do
		if v['Target'] == ply then
			gAC.Network.ASTToClient[k] = nil
		end
	end
	gAC.Network.AST[ply:SteamID64()] = nil
end)

_net_Receive("gAC.PlayerInit", function(_, ply)
	if ply.gAC_ClientLoaded then return end
	ply.gAC_ClientLoaded = true
	_net_Start("gAC.PlayerInit")
	_net_WriteData(gAC.Network.Payload_001, #gAC.Network.Payload_001)
	_net_Send(ply)
	_hook_Run('gAC.PlayerInit', ply)
end)

_hook_Run('gAC.NetworkInit')

--[[
	Sometimes i feel like the whole community just needs a push in the right direction.
	Meth tried too... my god, block the network name... these so called 'meth developers' make me want to puke.
	Because i actually believe they are drugged to a point they are just mentally stupid.
]]

_hook_Add('gAC.PlayerInit', 'gAC.PAYLOAD_VERIFY', function(ply)
	ply.gAC_Verifiying = true
	if gAC.config.PAYLOAD_VERIFY then
		_timer_Simple(gAC.config.PAYLOAD_VERIFY_TIMELIMIT, function()
			if _IsValid(ply) && ply.gAC_Verifiying == true && gAC.config.PAYLOAD_VERIFY then
				gAC.AddDetection( ply, "Payload verification failure [Code 116]", gAC.config.PAYLOAD_VERIFY_PUNISHMENT, -1 )
			end
		end)
	end
end)

gAC.Network:AddReceiver(
    "g-AC_PayloadVerification",
    function(data, plr)
        plr.gAC_Verifiying = nil
		gAC.DBGPrint(plr:Nick() .. " Payload Verified")
		_hook_Run("gAC.ClientLoaded", plr)
    end
)

_util_AddNetworkString (gAC.Network.GlobalChannel)
_util_AddNetworkString ("gAC.PlayerInit")

_net_Receive (gAC.Network.GlobalChannel,
	function (bitCount, ply)
		gAC.Network:HandleMessage(bitCount, ply)
	end
)