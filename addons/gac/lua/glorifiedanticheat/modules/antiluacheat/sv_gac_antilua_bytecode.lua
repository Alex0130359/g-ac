local
_,a,b,c,d,e,f,g,h={_="StringInBuffer"},bit.band,bit.rshift,jit.util.funcbc,table.concat,string.char,isstring,tonumber,util.CRC
ByteCode={}local
i,j={[0x46]=0x51,[0x47]=0x51,[0x48]=0x51,[0x49]=0x49,[0x4A]=0x49,[0x4B]=0x4B,[0x4C]=0x4B,[0x4D]=0x4B,[0x4E]=0x4E,[0x4F]=0x4E,[0x50]=0x4E,[0x51]=0x51,[0x52]=0x51,[0x53]=0x51},{[0x44]=0x54,[0x42]=0x41}function
ByteCode.FunctionToHash(f,k)local
l={}for
k=1,k.bytecodes-1
do
local
m=c(f,k)local
k=a(m,0xFF)if
i[k]then
m=i[k]end
if
j[k]then
m=m-k
m=m+j[k]end
l[#l+1]=e(a(m,0xFF),a(b(m,8),0xFF),a(b(m,16),0xFF),a(b(m,24),0xFF))end
return
g(h(d(l)))end
function
ByteCode.ByteCodeDumpToHash(b,c)if
f(b)then
b=gAC[_._](b)end
local
d=gAC.StringOutBuffer()for
c=1,c
do
local
c=b:UInt32()local
e=a(c,0xFF)if
i[e]then
c=i[e]end
if
j[e]then
c=c-e
c=c+j[e]end
d:UInt32(c)end
return
g(h(d:GetString()))end
function
ByteCode.GetFuncInformation(a,b)b=b||{}if
f(a)then
a=gAC[_._](a)end
a:UInt8()a:UInt8()a:UInt8()a:UInt8()a:ULEB128()a:ULEB128()local
c=a:ULEB128()a:ULEB128()b.linedefined=a:ULEB128()local
d=a:ULEB128()b.lastlinedefined=b.linedefined+d
b.proto=ByteCode.ByteCodeDumpToHash(a,c)return
b
end
function
ByteCode.DumpToFunctionList(a)local
b=gAC[_._](a)b:Bytes(4)b:UInt8()b:Bytes(b:ULEB128())local
a,c={},b:ULEB128()while
c~=0
do
local
d=b:Bytes(c)local
e=ByteCode.GetFuncInformation(d)a[#a+1]=e
c=b:ULEB128()end
return
a
end